@RestController 
	:Indica que utilizaremos arquitetura Rest
	
@GetMapping(value = "/", produces = "application/json")
public ResponseEntity<String> init()
	: Tipo de serviço RESTfull. Dados são transmitidos através de Json.
	
@PathVariable("id")
	:Como segue a arquitetura rest, a url não precisa ser passa do jeito clássico. 
		:url/10/parametro2/2
	:A url 
		
Nosso serviço pode ser diferenciado através dos parametroes na url e na forma com que ela é feita.

@RequestBody
	:Pega um Json e converte em um objeto. Se o nome da variavel for igual, não precisa especificar.

server.servlet.context-path=/cursospringrestapi
	:Define um contexto para o meu projeto. 
	:Isso significa que, ao perquisarmos na url, teremos que adicionar um contexto para o nosso projeto.
	
@ManyToOne(optional = false)
	:Significa que só o item referenciado é not null.
	
Como gerar o arquivo de implementação

. Copiar o caminho do projeto
.abrir o cmd
.cd + caminho do arquivo
.mvn + package -- Maven entra em ação para gerar o arquivo de implantação. Faz um Build.

Dentro do target ele gerou um war - > web archive
Deixar o nome do arquivo igual ao contexto pra fica simples de entender

No aplication.properties  hospedagem temos que colocar o username e a senha da hospedagem e implantar lá no servidor.

	
Essas anotações podem também ser usadas no métodos
	
// Mapeamento nos controllers e nos métodos (EndPoint) - [ Ou configura através do método addCorsMapping ou pelo Controller ] 

		@CrossOrigin(origins = "*") 
			:Faz o controle de quais requisições vindas de uma url podem acessar o nosso site.
			
		@CrossOrigin(origins = "https://www.viniciusmello.com") 
			:Somente esse site pode fazer as requisições ajax para o meu servidor.
			
		@CrossOrigin(origins = {"https://www.viniciusmello.com", "dominio02", "dominio03"}) 
			:Somente esse site pode fazer as requisições ajax para o meu servidor.
		
		Essa anotação também pode ser aplicada ao controller.
			:Endpoints são os métodos finais, pontos finais da nossa API são bloquedos colocando as anotações no método.
		
// Mapeamento global que reflete em todo o sistema.	[ addCorsMapping ou pelo Controller ] 
		

registry.addMapping("/**"); // Mapeia as urls internas que vão poder ser acessadas por todos
	:Libera acesso as urls internas.
.allowedMethods("*") // "POST", "DELETE", "PUT"
	:Diz quais são os métodos permitidos.
.allowedOrigins("*"); // viniciusmello.com 
	: Diz quais são os clientes permitidos.
		
		
JSON Web Token 
	: Padrão de autenticação na arquitetura Rest -> Envia um Json para o servidor reconhecer que você tem a permissão e isso é enviado
	em todas as requisições.
	
	Ele é formado por 3 Seções (Header, Payload, Signature)
	
	Header
		:Define informações sobre o tipo de Token, nesse caso JWT
		
	PayLoads
		:Contém as informações da entidade autorizada [USUÁRIO QUE FEZ O LOGIN]
		
	Signature 
		:É a junção de todas as partes somando a uma chave de assinatura ou certificado. 
		Tudo é codificado em Base 64